import streamlit as st
import pandas as pd
import io
import re

# Page config
st.set_page_config(
    page_title="URL Redirect Mapping Tool",
    page_icon="ðŸ”„",
    layout="wide"
)

# App header
st.title("URL Redirect Mapping Tool")
st.markdown("""
Deze tool helpt bij het maken van URL-redirects. 
Upload twee bestanden: Ã©Ã©n met de oude URLs en Ã©Ã©n met de nieuwe URLs.
""")

# Hulpfuncties
def validate_url(url):
    """Valideer of een string een geldige URL is."""
    if not url or pd.isna(url):
        return False
    
    # Eenvoudige URL-validatie
    url_pattern = re.compile(
        r'^(https?://)?'  # http:// of https://
        r'([a-zA-Z0-9-]+\.)*[a-zA-Z0-9-]+\.[a-zA-Z]{2,}'  # domein
        r'(/.*)?$'  # pad
    )
    return bool(url_pattern.match(url))

def generate_htaccess(source_urls, target_urls):
    """Genereer .htaccess regels voor de gegeven URLs."""
    htaccess_content = "# Redirect mappings generated by URL Redirect Mapper\n"
    htaccess_content += "# Format: RedirectPermanent source_path target_url\n\n"
    htaccess_content += "RewriteEngine On\n\n"
    
    for source, target in zip(source_urls, target_urls):
        if pd.isna(source) or pd.isna(target):
            continue
            
        # Extract source path
        if "://" in source:
            source_path = source.split("://", 1)[1]
            if "/" in source_path:
                source_path = "/" + source_path.split("/", 1)[1]
            else:
                source_path = "/"
        else:
            source_path = source
        
        htaccess_content += f"RedirectPermanent {source_path} {target}\n"
    
    return htaccess_content

# Main panel for data upload
col1, col2 = st.columns(2)

with col1:
    st.subheader("Bestand met oude URLs")
    source_file = st.file_uploader("Upload CSV-bestand met oude URLs", type=["csv"], key="source_file")

with col2:
    st.subheader("Bestand met nieuwe URLs")
    target_file = st.file_uploader("Upload CSV-bestand met nieuwe URLs", type=["csv"], key="target_file")

if source_file is not None and target_file is not None:
    try:
        # Inlezen van CSV-bestanden
        source_df = pd.read_csv(source_file)
        target_df = pd.read_csv(target_file)
        
        st.success(f"Bestanden succesvol geladen: {source_file.name} en {target_file.name}")
        
        # Controleer of beide bestanden evenveel rijen hebben
        if len(source_df) != len(target_df):
            st.error(f"De bestanden hebben een verschillend aantal rijen: {len(source_df)} in bronbestand, {len(target_df)} in doelbestand.")
        else:
            # Toon voorbeeld van beide bestanden
            st.subheader("Voorbeeld van geÃ¼ploade data")
            
            with col1:
                st.write("Bronbestand (eerste 5 rijen):")
                st.dataframe(source_df.head())
                
            with col2:
                st.write("Doelbestand (eerste 5 rijen):")
                st.dataframe(target_df.head())
            
            # Laat de gebruiker kolommen kiezen
            st.subheader("Selecteer kolommen")
            
            source_cols = list(source_df.columns)
            target_cols = list(target_df.columns)
            
            source_col = st.selectbox("Selecteer de kolom met bron-URLs", source_cols, index=0)
            target_col = st.selectbox("Selecteer de kolom met doel-URLs", target_cols, index=0)
            
            if st.button("Valideer en verwerk URLs"):
                # Valideren van URLs
                source_df['bron_valide'] = source_df[source_col].apply(validate_url)
                target_df['doel_valide'] = target_df[target_col].apply(validate_url)
                
                # Combineer de gegevens
                combined_df = pd.DataFrame({
                    'bron_url': source_df[source_col],
                    'doel_url': target_df[target_col],
                    'bron_valide': source_df['bron_valide'],
                    'doel_valide': target_df['doel_valide']
                })
                
                # Tellen van geldige en ongeldige URLs
                valide_rijen = combined_df['bron_valide'] & combined_df['doel_valide']
                valide_aantal = valide_rijen.sum()
                ongeldig_aantal = len(combined_df) - valide_aantal
                
                # Toon statistieken
                col1, col2 = st.columns(2)
                col1.metric("Geldige URL-paren", valide_aantal)
                col2.metric("Ongeldige URL-paren", ongeldig_aantal)
                
                if ongeldig_aantal > 0:
                    st.warning(f"Er zijn {ongeldig_aantal} ongeldige URL-paren gevonden. Deze worden gemarkeerd in de output.")
                
                # Toon resultaat
                st.write("Gevalideerde resultaten:")
                st.dataframe(combined_df)
                
                # Export opties
                st.subheader("Exporteren")
                
                # Excel export
                excel_buffer = io.BytesIO()
                with pd.ExcelWriter(excel_buffer, engine='openpyxl') as writer:
                    combined_df.to_excel(writer, index=False, sheet_name='Redirects')
                
                st.download_button(
                    label="Download als Excel (.xlsx)",
                    data=excel_buffer.getvalue(),
                    file_name="redirect_mappings.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
                
                # CSV export
                csv = combined_df.to_csv(index=False).encode('utf-8')
                st.download_button(
                    label="Download als CSV",
                    data=csv,
                    file_name="redirect_mappings.csv",
                    mime="text/csv",
                )
                
                # .htaccess export
                htaccess_content = generate_htaccess(
                    combined_df[valide_rijen]['bron_url'],
                    combined_df[valide_rijen]['doel_url']
                )
                
                st.download_button(
                    label="Download als .htaccess",
                    data=htaccess_content,
                    file_name="redirects.htaccess",
                    mime="text/plain",
                )
                
    except Exception as e:
        st.error(f"Fout bij het verwerken van de bestanden: {str(e)}")
        st.exception(e)

# Sidebar met instructies
with st.sidebar:
    st.header("Instructies")
    st.markdown("""
    1. **Upload twee CSV-bestanden**:
       - Eerste bestand: CSV met oude/bron URLs
       - Tweede bestand: CSV met nieuwe/doel URLs
       
    2. **Selecteer de kolommen** die de bron- en doel-URLs bevatten
    
    3. **Klik op "Valideer en verwerk URLs"** om de URLs te controleren
    
    4. **Download de resultaten** in het gewenste formaat:
       - Excel (.xlsx)
       - CSV
       - .htaccess voor Apache webservers
    """)
    
    st.header("Voorbeeld CSV formaat")
    
    st.write("**Bestand 1 (oude URLs):**")
    st.code("""url
https://oude-site.nl/pagina1
https://oude-site.nl/over-ons
https://fr.oude-site.com/nouvelles""")
    
    st.write("**Bestand 2 (nieuwe URLs):**")
    st.code("""url
https://nieuwe-site.nl/pagina1
https://nieuwe-site.nl/about-us
https://en.nieuwe-site.com/news""")

# Footer
st.markdown("---")
st.markdown("URL Redirect Mapping Tool Â© 2023") 