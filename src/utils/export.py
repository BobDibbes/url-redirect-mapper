import pandas as pd
import logging
from typing import Dict, List, Any, Optional

logger = logging.getLogger(__name__)

def export_to_csv(df: pd.DataFrame, output_file: str) -> None:
    """Export results to CSV format.
    
    Args:
        df: DataFrame with mapping results
        output_file: Path to the output CSV file
    """
    try:
        df.to_csv(output_file, index=False, encoding='utf-8')
        logger.info(f"Exported {len(df)} mappings to {output_file}")
    except Exception as e:
        logger.error(f"Error exporting to CSV: {str(e)}")
        raise

def export_to_htaccess(df: pd.DataFrame, output_file: str,
                     source_col: str = "source_url",
                     target_col: str = "suggested_target",
                     confidence_col: str = "confidence_score",
                     min_confidence: float = 0.5) -> None:
    """Export results to Apache .htaccess format.
    
    Args:
        df: DataFrame with mapping results
        output_file: Path to the output .htaccess file
        source_col: Column name for source URLs
        target_col: Column name for target URLs
        confidence_col: Column name for confidence scores
        min_confidence: Minimum confidence to include in the output
    """
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            # Write header comment
            f.write("# Redirect mappings generated by URL Redirect Mapper\n")
            f.write("# Format: RedirectPermanent source_path target_url\n\n")
            
            # Write RewriteEngine directive
            f.write("RewriteEngine On\n\n")
            
            # Filter by confidence and write redirects
            filtered_df = df[df[confidence_col] >= min_confidence].copy()
            
            for _, row in filtered_df.iterrows():
                source = row[source_col]
                target = row[target_col]
                
                if pd.isna(target) or not target:
                    continue
                
                # Extract source path
                if "://" in source:
                    source_path = source.split("://", 1)[1]
                    if "/" in source_path:
                        source_path = "/" + source_path.split("/", 1)[1]
                    else:
                        source_path = "/"
                else:
                    source_path = source
                
                # Write redirect rule
                f.write(f"RedirectPermanent {source_path} {target}\n")
            
            logger.info(f"Exported {len(filtered_df)} redirects to .htaccess file: {output_file}")
    
    except Exception as e:
        logger.error(f"Error exporting to .htaccess: {str(e)}")
        raise 